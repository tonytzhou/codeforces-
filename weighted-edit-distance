/*B. Weighted Edit Distance
time limit per test1 second
memory limit per test256 megabytes
In class we learned the dynamic programming algorithm to compute the edit distance. In this problem, your task is to write a program to compute the weighted edit distance. In particular, you have two sequences of integers a
 and b
. You want to use insertion, deletion, or edit to change a
 to match b
. However, the costs of the three operations are different. The cost of inserting an element x
 is x
. The cost of deleting an element x
 is x
. The cost of editing (changing) an element from x
 to y
 is |x−y|
. Your task is to change a
 to b
 with the smallest cost.

Input
The first line contains two integer n1
 and n2
 (1≤n1,n2≤1000
), which are the length of strings a
 and b
, respectively.

The second line contains n1
 integers, which is the sequence of a
 (each ai
, 0≤ai≤1000
).

The third line contains n2
 integers, which is the sequence of b
 (each bi
, 0≤bi≤1000
).

Output
The output only contains one integer, which is the smallest cost to change a
 to b
.

Examples
InputCopy
4 3
1 5 3 4
2 2 2
OutputCopy
7
InputCopy
5 5
0 464 200 724 546
430 815 774 211 567
OutputCopy
931
InputCopy
5 5
482 169 546 879 180
45 787 631 606 987
OutputCopy
1160*/

#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

int calculateWeightedEditDistance(const vector<int>& aSequence, const vector<int>& bSequence, int sizeA, int sizeB) {
    vector<vector<int>> dpVec(sizeA + 1, vector<int>(sizeB + 1, 0));

    for (int i = 1; i <= max(sizeA, sizeB); ++i) {
        if (i <= sizeA) dpVec.at(i).at(0) = dpVec.at(i-1).at(0) + aSequence.at(i-1); 
        if (i <= sizeB) dpVec.at(0).at(i) = dpVec.at(0).at(i-1) + bSequence.at(i-1); 
    }

    for (int i = 1; i <= sizeA; ++i) {
        for (int j = 1; j <= sizeB; ++j) {
            int insertCost = dpVec.at(i).at(j-1) + bSequence.at(j-1);
            int deleteCost = dpVec.at(i-1).at(j) + aSequence.at(i-1);
            int editCost = dpVec.at(i-1).at(j-1) + abs(aSequence.at(i-1) - bSequence.at(j-1));

            dpVec.at(i).at(j) = min({insertCost, deleteCost, editCost});
        }
    }

    return dpVec.at(sizeA).at(sizeB);
}

int main() {
    int aLength;
    int bLength;
    int result;

    cin >> aLength;
    cin >> bLength;

    vector<int> aSequence(aLength);
    vector<int> bSequence(bLength);

    for (int i = 0; i < aLength; ++i) {
        cin >> aSequence.at(i);
    }
    for (int i = 0; i < bLength; ++i) {
        cin >> bSequence.at(i);
    }

    result = calculateWeightedEditDistance(aSequence, bSequence, aLength, bLength);
    cout << result << endl;

    return 0;
}
