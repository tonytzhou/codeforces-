/*C. Square Candy Box
time limit per test2 s.
memory limit per test256 MB
Yan loves two things: square numbers and candies! For his birthday, you want to combine them with a gift: n
 candy boxes arranged from left to right, each with one candy. There are 106
 available types of candies, numbered from 1
 to 106
. To ensure that Yan would love this gift, you have a few goals:

No candy is used exactly once; that is, each candy must either not appear at all or appear at least twice.
For any two boxes i
 and j
 that have the same candy, the distance between them, which is |i−j|
, must be a perfect square∗
.
Find a valid way to choose the candies in each box, or determine if it is impossible to satisfy these goals! If there are multiple solutions, print any of them.

∗
A positive integer x
 is a perfect square if there exists a positive integer y
 such that x=y2
. For example, 49
 and 1
 are perfect squares because 49=72
 and 1=12
 respectively. On the other hand, 5
 is not a perfect square as no integer squared equals 5

Input
Each test contains multiple test cases. The first line contains the number of test cases t
 (1≤t≤2⋅105
). The description of the test cases follows.

The only line of each test case contains a single integer n
 (1≤n≤2⋅105
) — the number of boxes.

It is guaranteed that the sum of n
 over all test cases does not exceed 2⋅105
.

Output
For each test case, if no valid choice of candies exists, output −1
. Otherwise, output n
 integers, where the i
-th integer represents the candy type in the i
-th box. If there are multiple solutions, print any of them.

Example
InputCopy
2
3
12
OutputCopy
-1
1 2 3 6 10 2 7 6 10 1 7 3*/

#include <iostream>
#include <cstdlib>
#include <vector>

using namespace std;

void solveFunction(){
    vector<int> vect = {1, 3, 3, 4, 4, 5, 5, 6, 6, 1, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 2, 13, 13, 1, 2};
    int num;
    cin >> num;
    
    if(num % 2 == 0){
        for(int i = 1; i <= num / 2; i++){
            cout << i << " " << i << " ";
        }
        cout << endl;
        return;
    }

    if(num < 27){
        cout << -1 << endl;
        return;
    }

    num = num - 27;

    for(int v : vect){
        cout << v << " ";
    }
    for(int i = 0; i < num / 2; i++){
        cout << 14 + i << " " << 14 + i << " ";
    }
    cout << endl;
}

int main(){
    int numTests;
    cin >> numTests;

    while(numTests--){
        solveFunction();
    }
}
